var Ge = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {}, we = { exports: {} };
(function(R, b) {
  (function(h, v) {
    R.exports = v();
  })(Ge, function() {
    function h(i) {
      return i && i.__esModule && Object.prototype.hasOwnProperty.call(i, "default") ? i.default : i;
    }
    function v(i) {
      if (i.__esModule)
        return i;
      var a = Object.defineProperty({}, "__esModule", { value: !0 });
      return Object.keys(i).forEach(function(r) {
        var t = Object.getOwnPropertyDescriptor(i, r);
        Object.defineProperty(a, r, t.get ? t : {
          enumerable: !0,
          get: function() {
            return i[r];
          }
        });
      }), a;
    }
    var O = {}, T = {};
    Object.defineProperty(T, "__esModule", { value: !0 });
    class C {
      constructor() {
        this._listeners = {}, this._mapCdataTags = this.makeMap("script,style"), this._arrBlocks = [], this.lastEvent = null;
      }
      makeMap(a) {
        const r = {}, t = a.split(",");
        for (let e = 0; e < t.length; e++)
          r[t[e]] = !0;
        return r;
      }
      parse(a) {
        const r = this._mapCdataTags, t = /<(?:\/([^\s>]+)\s*|!--([\s\S]*?)--|!([^>]*?)|([\w\-:]+)((?:\s+[^\s"'>\/=\x00-\x0F\x7F\x80-\x9F]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s"'>]*))?)*?)\s*(\/?))>/g, e = /\s*([^\s"'>\/=\x00-\x0F\x7F\x80-\x9F]+)(?:\s*=\s*(?:(")([^"]*)"|(')([^']*)'|([^\s"'>]*)))?/g, n = /\r?\n/g;
        let o, l, s = 0, c, d, f = null, u, p = [], w = 0, m, x = 0, y = 1;
        const L = this._arrBlocks;
        this.fire("start", {
          pos: 0,
          line: 1,
          col: 1
        });
        const j = () => {
          const q = d.find((g) => g.name === "type") || {
            value: ""
          };
          return r[c] && q.value.indexOf("text/ng-template") === -1;
        }, k = (q, g, z, _) => {
          const A = z - x + 1;
          for (_ === void 0 && (_ = {}), _.raw = g, _.pos = z, _.line = y, _.col = A, L.push(_), this.fire(q, _); n.exec(g); )
            y++, x = z + n.lastIndex;
        };
        for (; o = t.exec(a); ) {
          if (l = o.index, l > s && (m = a.substring(s, l), f ? p.push(m) : k("text", m, s)), s = t.lastIndex, (c = o[1]) && (f && c === f && (m = p.join(""), k("cdata", m, w, {
            tagName: f,
            attrs: u
          }), f = null, u = void 0, p = []), !f)) {
            k("tagend", o[0], l, {
              tagName: c
            });
            continue;
          }
          if (f)
            p.push(o[0]);
          else if (c = o[4]) {
            d = [];
            const q = o[5];
            let g, z = 0;
            for (; g = e.exec(q); ) {
              const _ = g[1], A = g[2] ? g[2] : g[4] ? g[4] : "", me = g[3] ? g[3] : g[5] ? g[5] : g[6] ? g[6] : "";
              d.push({
                name: _,
                value: me,
                quote: A,
                index: g.index,
                raw: g[0]
              }), z += g[0].length;
            }
            z === q.length ? (k("tagstart", o[0], l, {
              tagName: c,
              attrs: d,
              close: o[6]
            }), j() && (f = c, u = d.concat(), p = [], w = s)) : k("text", o[0], l);
          } else
            (o[2] || o[3]) && k("comment", o[0], l, {
              content: o[2] || o[3],
              long: !!o[2]
            });
        }
        a.length > s && (m = a.substring(s, a.length), k("text", m, s)), this.fire("end", {
          pos: s,
          line: y,
          col: a.length - x + 1
        });
      }
      addListener(a, r) {
        const t = this._listeners, e = a.split(/[,\s]/);
        let n;
        for (let o = 0, l = e.length; o < l; o++)
          n = e[o], t[n] === void 0 && (t[n] = []), t[n].push(r);
      }
      fire(a, r) {
        r === void 0 && (r = {}), r.type = a;
        let t = [];
        const e = this._listeners[a], n = this._listeners.all;
        e !== void 0 && (t = t.concat(e)), n !== void 0 && (t = t.concat(n));
        const o = this.lastEvent;
        o !== null && (delete o.lastEvent, r.lastEvent = o), this.lastEvent = r;
        for (let l = 0, s = t.length; l < s; l++)
          t[l].call(this, r);
      }
      removeListener(a, r) {
        const t = this._listeners[a];
        if (t !== void 0) {
          for (let e = 0, n = t.length; e < n; e++)
            if (t[e] === r) {
              t.splice(e, 1);
              break;
            }
        }
      }
      fixPos(a, r) {
        const e = a.raw.substr(0, r).split(/\r?\n/), n = e.length - 1;
        let o = a.line, l;
        return n > 0 ? (o += n, l = e[n].length + 1) : l = a.col + r, {
          line: o,
          col: l
        };
      }
      getMapAttrs(a) {
        const r = {};
        let t;
        for (let e = 0, n = a.length; e < n; e++)
          t = a[e], r[t.name] = t.value;
        return r;
      }
    }
    T.default = C;
    var E = {};
    Object.defineProperty(E, "__esModule", { value: !0 });
    class xe {
      constructor(a, r) {
        this.html = a, this.lines = a.split(/\r?\n/);
        const t = /\r?\n/.exec(a);
        this.brLen = t !== null ? t[0].length : 0, this.ruleset = r, this.messages = [];
      }
      info(a, r, t, e, n) {
        this.report("info", a, r, t, e, n);
      }
      warn(a, r, t, e, n) {
        this.report("warning", a, r, t, e, n);
      }
      error(a, r, t, e, n) {
        this.report("error", a, r, t, e, n);
      }
      report(a, r, t, e, n, o) {
        const l = this.lines, s = this.brLen;
        let c = "", d = 0;
        for (let f = t - 1, u = l.length; f < u && (c = l[f], d = c.length, e > d && t < u); f++)
          t++, e -= d, e !== 1 && (e -= s);
        this.messages.push({
          type: a,
          message: r,
          raw: o,
          evidence: c,
          line: t,
          col: e,
          rule: {
            id: n.id,
            description: n.description,
            link: `https://htmlhint.com/docs/user-guide/rules/${n.id}`
          }
        });
      }
    }
    E.default = xe;
    var ye = {}, F = {};
    Object.defineProperty(F, "__esModule", { value: !0 }), F.default = {
      id: "alt-require",
      description: "The alt attribute of an <img> element must be present and alt attribute of area[href] and input[type=image] must have a value.",
      init(i, a) {
        i.addListener("tagstart", (r) => {
          const t = r.tagName.toLowerCase(), e = i.getMapAttrs(r.attrs), n = r.col + t.length + 1;
          let o;
          t === "img" && !("alt" in e) ? a.warn("An alt attribute must be present on <img> elements.", r.line, n, this, r.raw) : (t === "area" && "href" in e || t === "input" && e.type === "image") && (!("alt" in e) || e.alt === "") && (o = t === "area" ? "area[href]" : "input[type=image]", a.warn(`The alt attribute of ${o} must have a value.`, r.line, n, this, r.raw));
        });
      }
    };
    var P = {};
    Object.defineProperty(P, "__esModule", { value: !0 });
    const qe = [
      "allowReorder",
      "attributeName",
      "attributeType",
      "autoReverse",
      "baseFrequency",
      "baseProfile",
      "calcMode",
      "clipPath",
      "clipPathUnits",
      "contentScriptType",
      "contentStyleType",
      "diffuseConstant",
      "edgeMode",
      "externalResourcesRequired",
      "filterRes",
      "filterUnits",
      "glyphRef",
      "gradientTransform",
      "gradientUnits",
      "kernelMatrix",
      "kernelUnitLength",
      "keyPoints",
      "keySplines",
      "keyTimes",
      "lengthAdjust",
      "limitingConeAngle",
      "markerHeight",
      "markerUnits",
      "markerWidth",
      "maskContentUnits",
      "maskUnits",
      "numOctaves",
      "onBlur",
      "onChange",
      "onClick",
      "onFocus",
      "onKeyUp",
      "onLoad",
      "pathLength",
      "patternContentUnits",
      "patternTransform",
      "patternUnits",
      "pointsAtX",
      "pointsAtY",
      "pointsAtZ",
      "preserveAlpha",
      "preserveAspectRatio",
      "primitiveUnits",
      "refX",
      "refY",
      "repeatCount",
      "repeatDur",
      "requiredExtensions",
      "requiredFeatures",
      "specularConstant",
      "specularExponent",
      "spreadMethod",
      "startOffset",
      "stdDeviation",
      "stitchTiles",
      "surfaceScale",
      "systemLanguage",
      "tableValues",
      "targetX",
      "targetY",
      "textLength",
      "viewBox",
      "viewTarget",
      "xChannelSelector",
      "yChannelSelector",
      "zoomAndPan"
    ];
    function _e(i, a) {
      if (a instanceof RegExp)
        return a.test(i) ? { match: i, pattern: a } : !1;
      const r = a[0], t = a[a.length - 1], e = a[a.length - 2], n = r === "/" && (t === "/" || e === "/" && t === "i"), o = n && t === "i";
      return n ? o ? new RegExp(a.slice(1, -2), "i").test(i) : new RegExp(a.slice(1, -1)).test(i) : i === a;
    }
    P.default = {
      id: "attr-lowercase",
      description: "All attribute names must be in lowercase.",
      init(i, a, r) {
        const t = (Array.isArray(r) ? r : []).concat(qe);
        i.addListener("tagstart", (e) => {
          const n = e.attrs;
          let o;
          const l = e.col + e.tagName.length + 1;
          for (let s = 0, c = n.length; s < c; s++) {
            o = n[s];
            const d = o.name;
            !t.find((f) => _e(d, f)) && d !== d.toLowerCase() && a.error(`The attribute name of [ ${d} ] must be in lowercase.`, e.line, l + o.index, this, o.raw);
          }
        });
      }
    };
    var $ = {};
    Object.defineProperty($, "__esModule", { value: !0 }), $.default = {
      id: "attr-sorted",
      description: "Attribute tags must be in proper order.",
      init(i, a) {
        const r = {}, t = [
          "class",
          "id",
          "name",
          "src",
          "for",
          "type",
          "href",
          "value",
          "title",
          "alt",
          "role"
        ];
        for (let e = 0; e < t.length; e++)
          r[t[e]] = e;
        i.addListener("tagstart", (e) => {
          const n = e.attrs, o = [];
          for (let s = 0; s < n.length; s++)
            o.push(n[s].name);
          const l = JSON.stringify(o);
          o.sort((s, c) => r[s] == null && r[c] == null ? 0 : r[s] == null ? 1 : r[c] == null ? -1 : r[s] - r[c] || s.localeCompare(c)), l !== JSON.stringify(o) && a.error(`Inaccurate order ${l} should be in hierarchy ${JSON.stringify(o)} `, e.line, e.col, this, e.raw);
        });
      }
    };
    var N = {};
    Object.defineProperty(N, "__esModule", { value: !0 }), N.default = {
      id: "attr-no-duplication",
      description: "Elements cannot have duplicate attributes.",
      init(i, a) {
        i.addListener("tagstart", (r) => {
          const t = r.attrs;
          let e, n;
          const o = r.col + r.tagName.length + 1, l = {};
          for (let s = 0, c = t.length; s < c; s++)
            e = t[s], n = e.name, l[n] === !0 && a.error(`Duplicate of attribute name [ ${e.name} ] was found.`, r.line, o + e.index, this, e.raw), l[n] = !0;
        });
      }
    };
    var D = {};
    Object.defineProperty(D, "__esModule", { value: !0 }), D.default = {
      id: "attr-unsafe-chars",
      description: "Attribute values cannot contain unsafe chars.",
      init(i, a) {
        i.addListener("tagstart", (r) => {
          const t = r.attrs;
          let e;
          const n = r.col + r.tagName.length + 1, o = /[\u0000-\u0008\u000b\u000c\u000e-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/;
          let l;
          for (let s = 0, c = t.length; s < c; s++)
            if (e = t[s], l = o.exec(e.value), l !== null) {
              const d = escape(l[0]).replace(/%u/, "\\u").replace(/%/, "\\x");
              a.warn(`The value of attribute [ ${e.name} ] cannot contain an unsafe char [ ${d} ].`, r.line, n + e.index, this, e.raw);
            }
        });
      }
    };
    var S = {};
    Object.defineProperty(S, "__esModule", { value: !0 }), S.default = {
      id: "attr-value-double-quotes",
      description: "Attribute values must be in double quotes.",
      init(i, a) {
        i.addListener("tagstart", (r) => {
          const t = r.attrs;
          let e;
          const n = r.col + r.tagName.length + 1;
          for (let o = 0, l = t.length; o < l; o++)
            e = t[o], (e.value !== "" && e.quote !== '"' || e.value === "" && e.quote === "'") && a.error(`The value of attribute [ ${e.name} ] must be in double quotes.`, r.line, n + e.index, this, e.raw);
        });
      }
    };
    var H = {};
    Object.defineProperty(H, "__esModule", { value: !0 }), H.default = {
      id: "attr-value-not-empty",
      description: "All attributes must have values.",
      init(i, a) {
        i.addListener("tagstart", (r) => {
          const t = r.attrs;
          let e;
          const n = r.col + r.tagName.length + 1;
          for (let o = 0, l = t.length; o < l; o++)
            e = t[o], e.quote === "" && e.value === "" && a.warn(`The attribute [ ${e.name} ] must have a value.`, r.line, n + e.index, this, e.raw);
        });
      }
    };
    var I = {};
    Object.defineProperty(I, "__esModule", { value: !0 }), I.default = {
      id: "attr-value-single-quotes",
      description: "Attribute values must be in single quotes.",
      init(i, a) {
        i.addListener("tagstart", (r) => {
          const t = r.attrs;
          let e;
          const n = r.col + r.tagName.length + 1;
          for (let o = 0, l = t.length; o < l; o++)
            e = t[o], (e.value !== "" && e.quote !== "'" || e.value === "" && e.quote === '"') && a.error(`The value of attribute [ ${e.name} ] must be in single quotes.`, r.line, n + e.index, this, e.raw);
        });
      }
    };
    var U = {};
    Object.defineProperty(U, "__esModule", { value: !0 }), U.default = {
      id: "attr-whitespace",
      description: "All attributes should be separated by only one space and not have leading/trailing whitespace.",
      init(i, a, r) {
        const t = Array.isArray(r) ? r : [];
        i.addListener("tagstart", (e) => {
          const n = e.attrs;
          let o;
          const l = e.col + e.tagName.length + 1;
          n.forEach((s) => {
            o = s;
            const c = s.name;
            t.indexOf(c) === -1 && (s.value.trim() !== s.value && a.error(`The attributes of [ ${c} ] must not have leading or trailing whitespace.`, e.line, l + o.index, this, o.raw), s.value.replace(/ +(?= )/g, "") !== s.value && a.error(`The attributes of [ ${c} ] must be separated by only one space.`, e.line, l + o.index, this, o.raw));
          });
        });
      }
    };
    var B = {};
    Object.defineProperty(B, "__esModule", { value: !0 }), B.default = {
      id: "doctype-first",
      description: "Doctype must be declared first.",
      init(i, a) {
        const r = (t) => {
          t.type === "start" || t.type === "text" && /^\s*$/.test(t.raw) || ((t.type !== "comment" && t.long === !1 || /^DOCTYPE\s+/i.test(t.content) === !1) && a.error("Doctype must be declared first.", t.line, t.col, this, t.raw), i.removeListener("all", r));
        };
        i.addListener("all", r);
      }
    };
    var V = {};
    Object.defineProperty(V, "__esModule", { value: !0 }), V.default = {
      id: "doctype-html5",
      description: 'Invalid doctype. Use: "<!DOCTYPE html>"',
      init(i, a) {
        const r = (e) => {
          e.long === !1 && e.content.toLowerCase() !== "doctype html" && a.warn('Invalid doctype. Use: "<!DOCTYPE html>"', e.line, e.col, this, e.raw);
        }, t = () => {
          i.removeListener("comment", r), i.removeListener("tagstart", t);
        };
        i.addListener("all", r), i.addListener("tagstart", t);
      }
    };
    var Z = {};
    Object.defineProperty(Z, "__esModule", { value: !0 }), Z.default = {
      id: "head-script-disabled",
      description: "The <script> tag cannot be used in a <head> tag.",
      init(i, a) {
        const r = /^(text\/javascript|application\/javascript)$/i;
        let t = !1;
        const e = (o) => {
          const s = i.getMapAttrs(o.attrs).type, c = o.tagName.toLowerCase();
          c === "head" && (t = !0), t === !0 && c === "script" && (!s || r.test(s) === !0) && a.warn("The <script> tag cannot be used in a <head> tag.", o.line, o.col, this, o.raw);
        }, n = (o) => {
          o.tagName.toLowerCase() === "head" && (i.removeListener("tagstart", e), i.removeListener("tagend", n));
        };
        i.addListener("tagstart", e), i.addListener("tagend", n);
      }
    };
    var W = {};
    Object.defineProperty(W, "__esModule", { value: !0 }), W.default = {
      id: "href-abs-or-rel",
      description: "An href attribute must be either absolute or relative.",
      init(i, a, r) {
        const t = r === "abs" ? "absolute" : "relative";
        i.addListener("tagstart", (e) => {
          const n = e.attrs;
          let o;
          const l = e.col + e.tagName.length + 1;
          for (let s = 0, c = n.length; s < c; s++)
            if (o = n[s], o.name === "href") {
              (t === "absolute" && /^\w+?:/.test(o.value) === !1 || t === "relative" && /^https?:\/\//.test(o.value) === !0) && a.warn(`The value of the href attribute [ ${o.value} ] must be ${t}.`, e.line, l + o.index, this, o.raw);
              break;
            }
        });
      }
    };
    var G = {};
    Object.defineProperty(G, "__esModule", { value: !0 });
    const je = "(?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))", ze = "(?<privateUse>x(-[A-Za-z0-9]{1,8})+)", Le = "(?<privateUse2>x(-[A-Za-z0-9]{1,8})+)", Re = `((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-${ze})?)`, Te = `(${je}|${Re}|${Le})`;
    G.default = {
      id: "html-lang-require",
      description: "The lang attribute of an <html> element must be present and should be valid.",
      init(i, a) {
        i.addListener("tagstart", (r) => {
          const t = r.tagName.toLowerCase(), e = i.getMapAttrs(r.attrs), n = r.col + t.length + 1, o = new RegExp(Te, "g");
          t === "html" && ("lang" in e ? e.lang ? o.test(e.lang) || a.warn("The lang attribute value of <html> element must be a valid BCP47.", r.line, n, this, r.raw) : a.warn("The lang attribute of <html> element must have a value.", r.line, n, this, r.raw) : a.warn("An lang attribute must be present on <html> elements.", r.line, n, this, r.raw));
        });
      }
    };
    var Y = {};
    Object.defineProperty(Y, "__esModule", { value: !0 }), Y.default = {
      id: "id-class-ad-disabled",
      description: "The id and class attributes cannot use the ad keyword, it will be blocked by adblock software.",
      init(i, a) {
        i.addListener("tagstart", (r) => {
          const t = r.attrs;
          let e, n;
          const o = r.col + r.tagName.length + 1;
          for (let l = 0, s = t.length; l < s; l++)
            e = t[l], n = e.name, /^(id|class)$/i.test(n) && /(^|[-_])ad([-_]|$)/i.test(e.value) && a.warn(`The value of attribute ${n} cannot use the ad keyword.`, r.line, o + e.index, this, e.raw);
        });
      }
    };
    var X = {};
    Object.defineProperty(X, "__esModule", { value: !0 }), X.default = {
      id: "id-class-value",
      description: "The id and class attribute values must meet the specified rules.",
      init(i, a, r) {
        const t = {
          underline: {
            regId: /^[a-z\d]+(_[a-z\d]+)*$/,
            message: "The id and class attribute values must be in lowercase and split by an underscore."
          },
          dash: {
            regId: /^[a-z\d]+(-[a-z\d]+)*$/,
            message: "The id and class attribute values must be in lowercase and split by a dash."
          },
          hump: {
            regId: /^[a-z][a-zA-Z\d]*([A-Z][a-zA-Z\d]*)*$/,
            message: "The id and class attribute values must meet the camelCase style."
          }
        };
        let e;
        if (typeof r == "string" ? e = t[r] : e = r, typeof e == "object" && e.regId) {
          let n = e.regId;
          const o = e.message;
          n instanceof RegExp || (n = new RegExp(n)), i.addListener("tagstart", (l) => {
            const s = l.attrs;
            let c;
            const d = l.col + l.tagName.length + 1;
            for (let f = 0, u = s.length; f < u; f++)
              if (c = s[f], c.name.toLowerCase() === "id" && n.test(c.value) === !1 && a.warn(o, l.line, d + c.index, this, c.raw), c.name.toLowerCase() === "class") {
                const p = c.value.split(/\s+/g);
                let w;
                for (let m = 0, x = p.length; m < x; m++)
                  w = p[m], w && n.test(w) === !1 && a.warn(o, l.line, d + c.index, this, w);
              }
          });
        }
      }
    };
    var Q = {};
    Object.defineProperty(Q, "__esModule", { value: !0 }), Q.default = {
      id: "id-unique",
      description: "The value of id attributes must be unique.",
      init(i, a) {
        const r = {};
        i.addListener("tagstart", (t) => {
          const e = t.attrs;
          let n, o;
          const l = t.col + t.tagName.length + 1;
          for (let s = 0, c = e.length; s < c; s++)
            if (n = e[s], n.name.toLowerCase() === "id") {
              o = n.value, o && (r[o] === void 0 ? r[o] = 1 : r[o]++, r[o] > 1 && a.error(`The id value [ ${o} ] must be unique.`, t.line, l + n.index, this, n.raw));
              break;
            }
        });
      }
    };
    var J = {};
    Object.defineProperty(J, "__esModule", { value: !0 }), J.default = {
      id: "inline-script-disabled",
      description: "Inline script cannot be used.",
      init(i, a) {
        i.addListener("tagstart", (r) => {
          const t = r.attrs;
          let e;
          const n = r.col + r.tagName.length + 1;
          let o;
          const l = /^on(unload|message|submit|select|scroll|resize|mouseover|mouseout|mousemove|mouseleave|mouseenter|mousedown|load|keyup|keypress|keydown|focus|dblclick|click|change|blur|error)$/i;
          for (let s = 0, c = t.length; s < c; s++)
            e = t[s], o = e.name.toLowerCase(), l.test(o) === !0 ? a.warn(`Inline script [ ${e.raw} ] cannot be used.`, r.line, n + e.index, this, e.raw) : (o === "src" || o === "href") && /^\s*javascript:/i.test(e.value) && a.warn(`Inline script [ ${e.raw} ] cannot be used.`, r.line, n + e.index, this, e.raw);
        });
      }
    };
    var K = {};
    Object.defineProperty(K, "__esModule", { value: !0 }), K.default = {
      id: "inline-style-disabled",
      description: "Inline style cannot be used.",
      init(i, a) {
        i.addListener("tagstart", (r) => {
          const t = r.attrs;
          let e;
          const n = r.col + r.tagName.length + 1;
          for (let o = 0, l = t.length; o < l; o++)
            e = t[o], e.name.toLowerCase() === "style" && a.warn(`Inline style [ ${e.raw} ] cannot be used.`, r.line, n + e.index, this, e.raw);
        });
      }
    };
    var ee = {};
    Object.defineProperty(ee, "__esModule", { value: !0 }), ee.default = {
      id: "input-requires-label",
      description: "All [ input ] tags must have a corresponding [ label ] tag. ",
      init(i, a) {
        const r = [], t = [];
        i.addListener("tagstart", (n) => {
          const o = n.tagName.toLowerCase(), l = i.getMapAttrs(n.attrs), s = n.col + o.length + 1;
          o === "input" && l.type !== "hidden" && t.push({ event: n, col: s, id: l.id }), o === "label" && "for" in l && l.for !== "" && r.push({ event: n, col: s, forValue: l.for });
        }), i.addListener("end", () => {
          t.forEach((n) => {
            e(n) || a.warn("No matching [ label ] tag found.", n.event.line, n.col, this, n.event.raw);
          });
        });
        function e(n) {
          let o = !1;
          return r.forEach((l) => {
            n.id && n.id === l.forValue && (o = !0);
          }), o;
        }
      }
    };
    var te = {};
    Object.defineProperty(te, "__esModule", { value: !0 }), te.default = {
      id: "script-disabled",
      description: "The <script> tag cannot be used.",
      init(i, a) {
        i.addListener("tagstart", (r) => {
          r.tagName.toLowerCase() === "script" && a.error("The <script> tag cannot be used.", r.line, r.col, this, r.raw);
        });
      }
    };
    var ie = {};
    Object.defineProperty(ie, "__esModule", { value: !0 }), ie.default = {
      id: "space-tab-mixed-disabled",
      description: "Do not mix tabs and spaces for indentation.",
      init(i, a, r) {
        let t = "nomix", e = null;
        if (typeof r == "string") {
          const n = /^([a-z]+)(\d+)?/.exec(r);
          n && (t = n[1], e = n[2] && parseInt(n[2], 10));
        }
        i.addListener("text", (n) => {
          const o = n.raw, l = /(^|\r?\n)([ \t]+)/g;
          let s;
          for (; s = l.exec(o); ) {
            const c = i.fixPos(n, s.index + s[1].length);
            if (c.col !== 1)
              continue;
            const d = s[2];
            t === "space" ? e ? (/^ +$/.test(d) === !1 || d.length % e !== 0) && a.warn(`Please use space for indentation and keep ${e} length.`, c.line, 1, this, n.raw) : /^ +$/.test(d) === !1 && a.warn("Please use space for indentation.", c.line, 1, this, n.raw) : t === "tab" && /^\t+$/.test(d) === !1 ? a.warn("Please use tab for indentation.", c.line, 1, this, n.raw) : / +\t|\t+ /.test(d) === !0 && a.warn("Do not mix tabs and spaces for indentation.", c.line, 1, this, n.raw);
          }
        });
      }
    };
    var re = {};
    Object.defineProperty(re, "__esModule", { value: !0 }), re.default = {
      id: "spec-char-escape",
      description: "Special characters must be escaped.",
      init(i, a) {
        i.addListener("text", (r) => {
          const t = r.raw, e = /([<>])|( \& )/g;
          let n;
          for (; n = e.exec(t); ) {
            const o = i.fixPos(r, n.index);
            a.error(`Special characters must be escaped : [ ${n[0]} ].`, o.line, o.col, this, r.raw);
          }
        });
      }
    };
    var oe = {};
    Object.defineProperty(oe, "__esModule", { value: !0 }), oe.default = {
      id: "src-not-empty",
      description: "The src attribute of an img(script,link) must have a value.",
      init(i, a) {
        i.addListener("tagstart", (r) => {
          const t = r.tagName, e = r.attrs;
          let n;
          const o = r.col + t.length + 1;
          for (let l = 0, s = e.length; l < s; l++)
            n = e[l], (/^(img|script|embed|bgsound|iframe)$/.test(t) === !0 && n.name === "src" || t === "link" && n.name === "href" || t === "object" && n.name === "data") && n.value === "" && a.error(`The attribute [ ${n.name} ] of the tag [ ${t} ] must have a value.`, r.line, o + n.index, this, n.raw);
        });
      }
    };
    var ne = {};
    Object.defineProperty(ne, "__esModule", { value: !0 }), ne.default = {
      id: "style-disabled",
      description: "<style> tags cannot be used.",
      init(i, a) {
        i.addListener("tagstart", (r) => {
          r.tagName.toLowerCase() === "style" && a.warn("The <style> tag cannot be used.", r.line, r.col, this, r.raw);
        });
      }
    };
    var ae = {};
    Object.defineProperty(ae, "__esModule", { value: !0 }), ae.default = {
      id: "tag-pair",
      description: "Tag must be paired.",
      init(i, a) {
        const r = [], t = i.makeMap("area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed,track,command,source,keygen,wbr");
        i.addListener("tagstart", (e) => {
          const n = e.tagName.toLowerCase();
          t[n] === void 0 && !e.close && r.push({
            tagName: n,
            line: e.line,
            raw: e.raw
          });
        }), i.addListener("tagend", (e) => {
          const n = e.tagName.toLowerCase();
          let o;
          for (o = r.length - 1; o >= 0 && r[o].tagName !== n; o--)
            ;
          if (o >= 0) {
            const l = [];
            for (let s = r.length - 1; s > o; s--)
              l.push(`</${r[s].tagName}>`);
            if (l.length > 0) {
              const s = r[r.length - 1];
              a.error(`Tag must be paired, missing: [ ${l.join("")} ], start tag match failed [ ${s.raw} ] on line ${s.line}.`, e.line, e.col, this, e.raw);
            }
            r.length = o;
          } else
            a.error(`Tag must be paired, no start tag: [ ${e.raw} ]`, e.line, e.col, this, e.raw);
        }), i.addListener("end", (e) => {
          const n = [];
          for (let o = r.length - 1; o >= 0; o--)
            n.push(`</${r[o].tagName}>`);
          if (n.length > 0) {
            const o = r[r.length - 1];
            a.error(`Tag must be paired, missing: [ ${n.join("")} ], open tag match failed [ ${o.raw} ] on line ${o.line}.`, e.line, e.col, this, "");
          }
        });
      }
    };
    var le = {};
    Object.defineProperty(le, "__esModule", { value: !0 }), le.default = {
      id: "tag-self-close",
      description: "Empty tags must be self closed.",
      init(i, a) {
        const r = i.makeMap("area,base,basefont,bgsound,br,col,frame,hr,img,input,isindex,link,meta,param,embed,track,command,source,keygen,wbr");
        i.addListener("tagstart", (t) => {
          const e = t.tagName.toLowerCase();
          r[e] !== void 0 && (t.close || a.warn(`The empty tag : [ ${e} ] must be self closed.`, t.line, t.col, this, t.raw));
        });
      }
    };
    var se = {};
    Object.defineProperty(se, "__esModule", { value: !0 }), se.default = {
      id: "empty-tag-not-self-closed",
      description: "Empty tags must not use self closed syntax.",
      init(i, a) {
        const r = i.makeMap("area,base,basefont,bgsound,br,col,frame,hr,img,input,isindex,link,meta,param,embed,track,command,source,keygen,wbr");
        i.addListener("tagstart", (t) => {
          const e = t.tagName.toLowerCase();
          r[e] !== void 0 && t.close && a.error(`The empty tag : [ ${e} ] must not use self closed syntax.`, t.line, t.col, this, t.raw);
        });
      }
    };
    var ce = {};
    Object.defineProperty(ce, "__esModule", { value: !0 }), ce.default = {
      id: "tagname-lowercase",
      description: "All html element names must be in lowercase.",
      init(i, a, r) {
        const t = Array.isArray(r) ? r : [];
        i.addListener("tagstart,tagend", (e) => {
          const n = e.tagName;
          t.indexOf(n) === -1 && n !== n.toLowerCase() && a.error(`The html element name of [ ${n} ] must be in lowercase.`, e.line, e.col, this, e.raw);
        });
      }
    };
    var de = {};
    Object.defineProperty(de, "__esModule", { value: !0 }), de.default = {
      id: "tagname-specialchars",
      description: "All special characters must be escaped.",
      init(i, a) {
        const r = /[^a-zA-Z0-9\-:_]/;
        i.addListener("tagstart,tagend", (t) => {
          const e = t.tagName;
          r.test(e) && a.error(`The html element name of [ ${e} ] contains special character.`, t.line, t.col, this, t.raw);
        });
      }
    };
    var fe = {};
    Object.defineProperty(fe, "__esModule", { value: !0 }), fe.default = {
      id: "title-require",
      description: "<title> must be present in <head> tag.",
      init(i, a) {
        let r = !1, t = !1;
        const e = (o) => {
          const l = o.tagName.toLowerCase();
          l === "head" ? r = !0 : l === "title" && r && (t = !0);
        }, n = (o) => {
          const l = o.tagName.toLowerCase();
          if (t && l === "title") {
            const s = o.lastEvent;
            (s.type !== "text" || s.type === "text" && /^\s*$/.test(s.raw) === !0) && a.error("<title></title> must not be empty.", o.line, o.col, this, o.raw);
          } else
            l === "head" && (t === !1 && a.error("<title> must be present in <head> tag.", o.line, o.col, this, o.raw), i.removeListener("tagstart", e), i.removeListener("tagend", n));
        };
        i.addListener("tagstart", e), i.addListener("tagend", n);
      }
    };
    var pe = {};
    Object.defineProperty(pe, "__esModule", { value: !0 });
    let M = {
      a: {
        selfclosing: !1,
        attrsRequired: ["href", "title"],
        redundantAttrs: ["alt"]
      },
      div: {
        selfclosing: !1
      },
      main: {
        selfclosing: !1,
        redundantAttrs: ["role"]
      },
      nav: {
        selfclosing: !1,
        redundantAttrs: ["role"]
      },
      script: {
        attrsOptional: [
          ["async", "async"],
          ["defer", "defer"]
        ]
      },
      img: {
        selfclosing: !0,
        attrsRequired: ["src", "alt", "title"]
      }
    };
    pe.default = {
      id: "tags-check",
      description: "Checks html tags.",
      init(i, a, r) {
        M = Object.assign(Object.assign({}, M), r), i.addListener("tagstart", (t) => {
          const e = t.attrs, n = t.col + t.tagName.length + 1, o = t.tagName.toLowerCase();
          if (M[o]) {
            const l = M[o];
            l.selfclosing === !0 && !t.close ? a.warn(`The <${o}> tag must be selfclosing.`, t.line, t.col, this, t.raw) : l.selfclosing === !1 && t.close && a.warn(`The <${o}> tag must not be selfclosing.`, t.line, t.col, this, t.raw), Array.isArray(l.attrsRequired) && l.attrsRequired.forEach((c) => {
              if (Array.isArray(c)) {
                const d = c.map((p) => p), f = d.shift(), u = d;
                e.some((p) => p.name === f) ? e.forEach((p) => {
                  p.name === f && u.indexOf(p.value) === -1 && a.error(`The <${o}> tag must have attr '${f}' with one value of '${u.join("' or '")}'.`, t.line, n, this, t.raw);
                }) : a.error(`The <${o}> tag must have attr '${f}'.`, t.line, n, this, t.raw);
              } else
                e.some((d) => c.split("|").indexOf(d.name) !== -1) || a.error(`The <${o}> tag must have attr '${c}'.`, t.line, n, this, t.raw);
            }), Array.isArray(l.attrsOptional) && l.attrsOptional.forEach((c) => {
              if (Array.isArray(c)) {
                const d = c.map((p) => p), f = d.shift(), u = d;
                e.some((p) => p.name === f) && e.forEach((p) => {
                  p.name === f && u.indexOf(p.value) === -1 && a.error(`The <${o}> tag must have optional attr '${f}' with one value of '${u.join("' or '")}'.`, t.line, n, this, t.raw);
                });
              }
            }), Array.isArray(l.redundantAttrs) && l.redundantAttrs.forEach((c) => {
              e.some((d) => d.name === c) && a.error(`The attr '${c}' is redundant for <${o}> and should be omitted.`, t.line, n, this, t.raw);
            });
          }
        });
      }
    };
    var ue = {};
    Object.defineProperty(ue, "__esModule", { value: !0 }), ue.default = {
      id: "attr-no-unnecessary-whitespace",
      description: "No spaces between attribute names and values.",
      init(i, a, r) {
        const t = Array.isArray(r) ? r : [];
        i.addListener("tagstart", (e) => {
          const n = e.attrs, o = e.col + e.tagName.length + 1;
          for (let l = 0; l < n.length; l++)
            if (t.indexOf(n[l].name) === -1) {
              const s = /(\s*)=(\s*)/.exec(n[l].raw.trim());
              s && (s[1].length !== 0 || s[2].length !== 0) && a.error(`The attribute '${n[l].name}' must not have spaces between the name and value.`, e.line, o + n[l].index, this, n[l].raw);
            }
        });
      }
    };
    var ge = {}, Ae = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      htmlElementAttributes: {
        "*": [
          "accesskey",
          "autocapitalize",
          "autofocus",
          "class",
          "contenteditable",
          "dir",
          "draggable",
          "enterkeyhint",
          "hidden",
          "id",
          "inert",
          "inputmode",
          "is",
          "itemid",
          "itemprop",
          "itemref",
          "itemscope",
          "itemtype",
          "lang",
          "nonce",
          "popover",
          "slot",
          "spellcheck",
          "style",
          "tabindex",
          "title",
          "translate"
        ],
        a: [
          "charset",
          "coords",
          "download",
          "href",
          "hreflang",
          "name",
          "ping",
          "referrerpolicy",
          "rel",
          "rev",
          "shape",
          "target",
          "type"
        ],
        applet: [
          "align",
          "alt",
          "archive",
          "code",
          "codebase",
          "height",
          "hspace",
          "name",
          "object",
          "vspace",
          "width"
        ],
        area: [
          "alt",
          "coords",
          "download",
          "href",
          "hreflang",
          "nohref",
          "ping",
          "referrerpolicy",
          "rel",
          "shape",
          "target",
          "type"
        ],
        audio: [
          "autoplay",
          "controls",
          "crossorigin",
          "loop",
          "muted",
          "preload",
          "src"
        ],
        base: ["href", "target"],
        basefont: ["color", "face", "size"],
        blockquote: ["cite"],
        body: ["alink", "background", "bgcolor", "link", "text", "vlink"],
        br: ["clear"],
        button: [
          "disabled",
          "form",
          "formaction",
          "formenctype",
          "formmethod",
          "formnovalidate",
          "formtarget",
          "name",
          "popovertarget",
          "popovertargetaction",
          "type",
          "value"
        ],
        canvas: ["height", "width"],
        caption: ["align"],
        col: ["align", "char", "charoff", "span", "valign", "width"],
        colgroup: ["align", "char", "charoff", "span", "valign", "width"],
        data: ["value"],
        del: ["cite", "datetime"],
        details: ["open"],
        dialog: ["open"],
        dir: ["compact"],
        div: ["align"],
        dl: ["compact"],
        embed: ["height", "src", "type", "width"],
        fieldset: ["disabled", "form", "name"],
        font: ["color", "face", "size"],
        form: [
          "accept",
          "accept-charset",
          "action",
          "autocomplete",
          "enctype",
          "method",
          "name",
          "novalidate",
          "target"
        ],
        frame: [
          "frameborder",
          "longdesc",
          "marginheight",
          "marginwidth",
          "name",
          "noresize",
          "scrolling",
          "src"
        ],
        frameset: ["cols", "rows"],
        h1: ["align"],
        h2: ["align"],
        h3: ["align"],
        h4: ["align"],
        h5: ["align"],
        h6: ["align"],
        head: ["profile"],
        hr: ["align", "noshade", "size", "width"],
        html: ["manifest", "version"],
        iframe: [
          "align",
          "allow",
          "allowfullscreen",
          "allowpaymentrequest",
          "allowusermedia",
          "frameborder",
          "height",
          "loading",
          "longdesc",
          "marginheight",
          "marginwidth",
          "name",
          "referrerpolicy",
          "sandbox",
          "scrolling",
          "src",
          "srcdoc",
          "width"
        ],
        img: [
          "align",
          "alt",
          "border",
          "crossorigin",
          "decoding",
          "fetchpriority",
          "height",
          "hspace",
          "ismap",
          "loading",
          "longdesc",
          "name",
          "referrerpolicy",
          "sizes",
          "src",
          "srcset",
          "usemap",
          "vspace",
          "width"
        ],
        input: [
          "accept",
          "align",
          "alt",
          "autocomplete",
          "checked",
          "dirname",
          "disabled",
          "form",
          "formaction",
          "formenctype",
          "formmethod",
          "formnovalidate",
          "formtarget",
          "height",
          "ismap",
          "list",
          "max",
          "maxlength",
          "min",
          "minlength",
          "multiple",
          "name",
          "pattern",
          "placeholder",
          "popovertarget",
          "popovertargetaction",
          "readonly",
          "required",
          "size",
          "src",
          "step",
          "type",
          "usemap",
          "value",
          "width"
        ],
        ins: ["cite", "datetime"],
        isindex: ["prompt"],
        label: ["for", "form"],
        legend: ["align"],
        li: ["type", "value"],
        link: [
          "as",
          "blocking",
          "charset",
          "color",
          "crossorigin",
          "disabled",
          "fetchpriority",
          "href",
          "hreflang",
          "imagesizes",
          "imagesrcset",
          "integrity",
          "media",
          "referrerpolicy",
          "rel",
          "rev",
          "sizes",
          "target",
          "type"
        ],
        map: ["name"],
        menu: ["compact"],
        meta: ["charset", "content", "http-equiv", "media", "name", "scheme"],
        meter: ["high", "low", "max", "min", "optimum", "value"],
        object: [
          "align",
          "archive",
          "border",
          "classid",
          "codebase",
          "codetype",
          "data",
          "declare",
          "form",
          "height",
          "hspace",
          "name",
          "standby",
          "type",
          "typemustmatch",
          "usemap",
          "vspace",
          "width"
        ],
        ol: ["compact", "reversed", "start", "type"],
        optgroup: ["disabled", "label"],
        option: ["disabled", "label", "selected", "value"],
        output: ["for", "form", "name"],
        p: ["align"],
        param: ["name", "type", "value", "valuetype"],
        pre: ["width"],
        progress: ["max", "value"],
        q: ["cite"],
        script: [
          "async",
          "blocking",
          "charset",
          "crossorigin",
          "defer",
          "fetchpriority",
          "integrity",
          "language",
          "nomodule",
          "referrerpolicy",
          "src",
          "type"
        ],
        select: [
          "autocomplete",
          "disabled",
          "form",
          "multiple",
          "name",
          "required",
          "size"
        ],
        slot: ["name"],
        source: ["height", "media", "sizes", "src", "srcset", "type", "width"],
        style: ["blocking", "media", "type"],
        table: [
          "align",
          "bgcolor",
          "border",
          "cellpadding",
          "cellspacing",
          "frame",
          "rules",
          "summary",
          "width"
        ],
        tbody: ["align", "char", "charoff", "valign"],
        td: [
          "abbr",
          "align",
          "axis",
          "bgcolor",
          "char",
          "charoff",
          "colspan",
          "headers",
          "height",
          "nowrap",
          "rowspan",
          "scope",
          "valign",
          "width"
        ],
        textarea: [
          "autocomplete",
          "cols",
          "dirname",
          "disabled",
          "form",
          "maxlength",
          "minlength",
          "name",
          "placeholder",
          "readonly",
          "required",
          "rows",
          "wrap"
        ],
        tfoot: ["align", "char", "charoff", "valign"],
        th: [
          "abbr",
          "align",
          "axis",
          "bgcolor",
          "char",
          "charoff",
          "colspan",
          "headers",
          "height",
          "nowrap",
          "rowspan",
          "scope",
          "valign",
          "width"
        ],
        thead: ["align", "char", "charoff", "valign"],
        time: ["datetime"],
        tr: ["align", "bgcolor", "char", "charoff", "valign"],
        track: ["default", "kind", "label", "src", "srclang"],
        ul: ["compact", "type"],
        video: [
          "autoplay",
          "controls",
          "crossorigin",
          "height",
          "loop",
          "muted",
          "playsinline",
          "poster",
          "preload",
          "src",
          "width"
        ]
      }
    }), Ce = /* @__PURE__ */ v(Ae), Me = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      htmlEventAttributes: [
        "onabort",
        "onafterprint",
        "onauxclick",
        "onbeforematch",
        "onbeforeprint",
        "onbeforeunload",
        "onblur",
        "oncancel",
        "oncanplay",
        "oncanplaythrough",
        "onchange",
        "onclick",
        "onclose",
        "oncontextlost",
        "oncontextmenu",
        "oncontextrestored",
        "oncopy",
        "oncuechange",
        "oncut",
        "ondblclick",
        "ondrag",
        "ondragend",
        "ondragenter",
        "ondragleave",
        "ondragover",
        "ondragstart",
        "ondrop",
        "ondurationchange",
        "onemptied",
        "onended",
        "onerror",
        "onfocus",
        "onformdata",
        "onhashchange",
        "oninput",
        "oninvalid",
        "onkeydown",
        "onkeypress",
        "onkeyup",
        "onlanguagechange",
        "onload",
        "onloadeddata",
        "onloadedmetadata",
        "onloadstart",
        "onmessage",
        "onmessageerror",
        "onmousedown",
        "onmouseenter",
        "onmouseleave",
        "onmousemove",
        "onmouseout",
        "onmouseover",
        "onmouseup",
        "onoffline",
        "ononline",
        "onpagehide",
        "onpageshow",
        "onpaste",
        "onpause",
        "onplay",
        "onplaying",
        "onpopstate",
        "onprogress",
        "onratechange",
        "onrejectionhandled",
        "onreset",
        "onresize",
        "onscroll",
        "onscrollend",
        "onsecuritypolicyviolation",
        "onseeked",
        "onseeking",
        "onselect",
        "onslotchange",
        "onstalled",
        "onstorage",
        "onsubmit",
        "onsuspend",
        "ontimeupdate",
        "ontoggle",
        "onunhandledrejection",
        "onunload",
        "onvolumechange",
        "onwaiting",
        "onwheel"
      ]
    }), Oe = /* @__PURE__ */ v(Me), Ee = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      svgElementAttributes: {
        "*": [
          "about",
          "class",
          "content",
          "datatype",
          "id",
          "lang",
          "property",
          "rel",
          "resource",
          "rev",
          "style",
          "tabindex",
          "typeof"
        ],
        a: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "download",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "href",
          "hreflang",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "ping",
          "pointer-events",
          "referrerpolicy",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "target",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "type",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        altGlyph: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "dx",
          "dy",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "format",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "glyphRef",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "rotate",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        altGlyphDef: [],
        altGlyphItem: [],
        animate: [
          "accumulate",
          "additive",
          "alignment-baseline",
          "attributeName",
          "attributeType",
          "baseline-shift",
          "begin",
          "by",
          "calcMode",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "dur",
          "enable-background",
          "end",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "from",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "href",
          "image-rendering",
          "kerning",
          "keySplines",
          "keyTimes",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "max",
          "min",
          "opacity",
          "overflow",
          "pointer-events",
          "repeatCount",
          "repeatDur",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "restart",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "to",
          "unicode-bidi",
          "values",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        animateColor: [
          "accumulate",
          "additive",
          "alignment-baseline",
          "attributeName",
          "attributeType",
          "baseline-shift",
          "begin",
          "by",
          "calcMode",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "dur",
          "enable-background",
          "end",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "from",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "keySplines",
          "keyTimes",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "max",
          "min",
          "opacity",
          "overflow",
          "pointer-events",
          "repeatCount",
          "repeatDur",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "restart",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "to",
          "unicode-bidi",
          "values",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        animateMotion: [
          "accumulate",
          "additive",
          "begin",
          "by",
          "calcMode",
          "dur",
          "end",
          "externalResourcesRequired",
          "fill",
          "from",
          "href",
          "keyPoints",
          "keySplines",
          "keyTimes",
          "max",
          "min",
          "origin",
          "path",
          "repeatCount",
          "repeatDur",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "restart",
          "rotate",
          "systemLanguage",
          "to",
          "values"
        ],
        animateTransform: [
          "accumulate",
          "additive",
          "attributeName",
          "attributeType",
          "begin",
          "by",
          "calcMode",
          "dur",
          "end",
          "externalResourcesRequired",
          "fill",
          "from",
          "href",
          "keySplines",
          "keyTimes",
          "max",
          "min",
          "repeatCount",
          "repeatDur",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "restart",
          "systemLanguage",
          "to",
          "type",
          "values"
        ],
        animation: [
          "begin",
          "dur",
          "end",
          "externalResourcesRequired",
          "fill",
          "focusHighlight",
          "focusable",
          "height",
          "initialVisibility",
          "max",
          "min",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "preserveAspectRatio",
          "repeatCount",
          "repeatDur",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "restart",
          "syncBehavior",
          "syncMaster",
          "syncTolerance",
          "systemLanguage",
          "transform",
          "width",
          "x",
          "y"
        ],
        audio: [
          "begin",
          "dur",
          "end",
          "externalResourcesRequired",
          "fill",
          "max",
          "min",
          "repeatCount",
          "repeatDur",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "restart",
          "syncBehavior",
          "syncMaster",
          "syncTolerance",
          "systemLanguage",
          "type"
        ],
        canvas: ["preserveAspectRatio", "requiredExtensions", "systemLanguage"],
        circle: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "cx",
          "cy",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pathLength",
          "pointer-events",
          "r",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        clipPath: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "clipPathUnits",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        "color-profile": ["local", "name", "rendering-intent"],
        cursor: [
          "externalResourcesRequired",
          "requiredExtensions",
          "requiredFeatures",
          "systemLanguage",
          "x",
          "y"
        ],
        defs: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        desc: [
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "systemLanguage"
        ],
        discard: [
          "begin",
          "href",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "systemLanguage"
        ],
        ellipse: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "cx",
          "cy",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pathLength",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "rx",
          "ry",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        feBlend: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "in",
          "in2",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "mode",
          "opacity",
          "overflow",
          "pointer-events",
          "result",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        feColorMatrix: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "in",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "result",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "type",
          "unicode-bidi",
          "values",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        feComponentTransfer: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "in",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "result",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        feComposite: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "in",
          "in2",
          "k1",
          "k2",
          "k3",
          "k4",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "operator",
          "overflow",
          "pointer-events",
          "result",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        feConvolveMatrix: [
          "alignment-baseline",
          "baseline-shift",
          "bias",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "divisor",
          "dominant-baseline",
          "edgeMode",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "in",
          "kernelMatrix",
          "kernelUnitLength",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "order",
          "overflow",
          "pointer-events",
          "preserveAlpha",
          "result",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "targetX",
          "targetY",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        feDiffuseLighting: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "diffuseConstant",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "in",
          "kernelUnitLength",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "result",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "surfaceScale",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        feDisplacementMap: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "in",
          "in2",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "result",
          "scale",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "xChannelSelector",
          "y",
          "yChannelSelector"
        ],
        feDistantLight: ["azimuth", "elevation"],
        feDropShadow: [
          "dx",
          "dy",
          "height",
          "in",
          "result",
          "stdDeviation",
          "width",
          "x",
          "y"
        ],
        feFlood: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "result",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        feFuncA: [
          "amplitude",
          "exponent",
          "intercept",
          "offset",
          "slope",
          "tableValues",
          "type"
        ],
        feFuncB: [
          "amplitude",
          "exponent",
          "intercept",
          "offset",
          "slope",
          "tableValues",
          "type"
        ],
        feFuncG: [
          "amplitude",
          "exponent",
          "intercept",
          "offset",
          "slope",
          "tableValues",
          "type"
        ],
        feFuncR: [
          "amplitude",
          "exponent",
          "intercept",
          "offset",
          "slope",
          "tableValues",
          "type"
        ],
        feGaussianBlur: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "edgeMode",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "in",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "result",
          "shape-rendering",
          "stdDeviation",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        feImage: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "crossorigin",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "href",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "preserveAspectRatio",
          "result",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        feMerge: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "result",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        feMergeNode: ["in"],
        feMorphology: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "in",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "operator",
          "overflow",
          "pointer-events",
          "radius",
          "result",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        feOffset: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "dx",
          "dy",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "in",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "result",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        fePointLight: ["x", "y", "z"],
        feSpecularLighting: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "in",
          "kernelUnitLength",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "result",
          "shape-rendering",
          "specularConstant",
          "specularExponent",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "surfaceScale",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        feSpotLight: [
          "limitingConeAngle",
          "pointsAtX",
          "pointsAtY",
          "pointsAtZ",
          "specularExponent",
          "x",
          "y",
          "z"
        ],
        feTile: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "in",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "result",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        feTurbulence: [
          "alignment-baseline",
          "baseFrequency",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "numOctaves",
          "opacity",
          "overflow",
          "pointer-events",
          "result",
          "seed",
          "shape-rendering",
          "stitchTiles",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "type",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        filter: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "filterRes",
          "filterUnits",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "primitiveUnits",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        font: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "horiz-origin-y",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        "font-face": [
          "accent-height",
          "alphabetic",
          "ascent",
          "bbox",
          "cap-height",
          "descent",
          "externalResourcesRequired",
          "font-family",
          "font-size",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "hanging",
          "ideographic",
          "mathematical",
          "overline-position",
          "overline-thickness",
          "panose-1",
          "slope",
          "stemh",
          "stemv",
          "strikethrough-position",
          "strikethrough-thickness",
          "underline-position",
          "underline-thickness",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "widths",
          "x-height"
        ],
        "font-face-format": ["string"],
        "font-face-name": ["name"],
        "font-face-src": [],
        "font-face-uri": ["externalResourcesRequired"],
        foreignObject: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        g: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        glyph: [
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "d",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "orientation",
          "overflow",
          "pointer-events",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode",
          "unicode-bidi",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        glyphRef: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "dx",
          "dy",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "format",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "glyphRef",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        handler: ["externalResourcesRequired", "type"],
        hkern: ["g1", "g2", "k", "u1", "u2"],
        iframe: ["requiredExtensions", "systemLanguage"],
        image: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "crossorigin",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "href",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pointer-events",
          "preserveAspectRatio",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "type",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        line: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pathLength",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode",
          "x1",
          "x2",
          "y1",
          "y2"
        ],
        linearGradient: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "gradientTransform",
          "gradientUnits",
          "href",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "shape-rendering",
          "spreadMethod",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode",
          "x1",
          "x2",
          "y1",
          "y2"
        ],
        listener: [
          "defaultAction",
          "event",
          "handler",
          "observer",
          "phase",
          "propagate",
          "target"
        ],
        marker: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "markerHeight",
          "markerUnits",
          "markerWidth",
          "mask",
          "opacity",
          "orient",
          "overflow",
          "pointer-events",
          "preserveAspectRatio",
          "refX",
          "refY",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "viewBox",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        mask: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "maskContentUnits",
          "maskUnits",
          "opacity",
          "overflow",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        metadata: [
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "systemLanguage"
        ],
        "missing-glyph": [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "d",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        mpath: ["externalResourcesRequired", "href"],
        path: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "d",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pathLength",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        pattern: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "href",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "patternContentUnits",
          "patternTransform",
          "patternUnits",
          "pointer-events",
          "preserveAspectRatio",
          "requiredExtensions",
          "requiredFeatures",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "viewBox",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        polygon: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pathLength",
          "pointer-events",
          "points",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        polyline: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pathLength",
          "pointer-events",
          "points",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        prefetch: [
          "bandwidth",
          "mediaCharacterEncoding",
          "mediaContentEncodings",
          "mediaSize",
          "mediaTime"
        ],
        radialGradient: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "cx",
          "cy",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "fr",
          "fx",
          "fy",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "gradientTransform",
          "gradientUnits",
          "href",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "r",
          "shape-rendering",
          "spreadMethod",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        rect: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pathLength",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "rx",
          "ry",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        script: ["crossorigin", "externalResourcesRequired", "href", "type"],
        set: [
          "attributeName",
          "attributeType",
          "begin",
          "dur",
          "end",
          "externalResourcesRequired",
          "fill",
          "href",
          "max",
          "min",
          "repeatCount",
          "repeatDur",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "restart",
          "systemLanguage",
          "to"
        ],
        solidColor: [],
        stop: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "offset",
          "opacity",
          "overflow",
          "pointer-events",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        style: ["media", "title", "type"],
        svg: [
          "alignment-baseline",
          "baseProfile",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "contentScriptType",
          "contentStyleType",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "playbackOrder",
          "playbackorder",
          "pointer-events",
          "preserveAspectRatio",
          "requiredExtensions",
          "requiredFeatures",
          "shape-rendering",
          "snapshotTime",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "syncBehaviorDefault",
          "syncToleranceDefault",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "timelineBegin",
          "timelinebegin",
          "transform",
          "unicode-bidi",
          "version",
          "viewBox",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y",
          "zoomAndPan"
        ],
        switch: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        symbol: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "preserveAspectRatio",
          "refX",
          "refY",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "unicode-bidi",
          "viewBox",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        tbreak: [
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "systemLanguage"
        ],
        text: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "dx",
          "dy",
          "editable",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "lengthAdjust",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "rotate",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "textLength",
          "transform",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        textArea: [
          "editable",
          "focusHighlight",
          "focusable",
          "height",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "systemLanguage",
          "transform",
          "width",
          "x",
          "y"
        ],
        textPath: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "href",
          "image-rendering",
          "kerning",
          "lengthAdjust",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "method",
          "opacity",
          "overflow",
          "path",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "shape-rendering",
          "side",
          "spacing",
          "startOffset",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "textLength",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode"
        ],
        title: [
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "systemLanguage"
        ],
        tref: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "dx",
          "dy",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "lengthAdjust",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "opacity",
          "overflow",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "rotate",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "textLength",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        tspan: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "dx",
          "dy",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "image-rendering",
          "kerning",
          "lengthAdjust",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "rotate",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "textLength",
          "unicode-bidi",
          "visibility",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        unknown: ["requiredExtensions", "systemLanguage"],
        use: [
          "alignment-baseline",
          "baseline-shift",
          "clip",
          "clip-path",
          "clip-rule",
          "color",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "cursor",
          "direction",
          "display",
          "dominant-baseline",
          "enable-background",
          "externalResourcesRequired",
          "fill",
          "fill-opacity",
          "fill-rule",
          "filter",
          "flood-color",
          "flood-opacity",
          "focusHighlight",
          "focusable",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "height",
          "href",
          "image-rendering",
          "kerning",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "mask",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "opacity",
          "overflow",
          "pointer-events",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "stroke",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "systemLanguage",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "transform",
          "unicode-bidi",
          "visibility",
          "width",
          "word-spacing",
          "writing-mode",
          "x",
          "y"
        ],
        video: [
          "begin",
          "dur",
          "end",
          "externalResourcesRequired",
          "fill",
          "focusHighlight",
          "focusable",
          "height",
          "initialVisibility",
          "max",
          "min",
          "nav-down",
          "nav-down-left",
          "nav-down-right",
          "nav-left",
          "nav-next",
          "nav-prev",
          "nav-right",
          "nav-up",
          "nav-up-left",
          "nav-up-right",
          "overlay",
          "preserveAspectRatio",
          "repeatCount",
          "repeatDur",
          "requiredExtensions",
          "requiredFeatures",
          "requiredFonts",
          "requiredFormats",
          "restart",
          "syncBehavior",
          "syncMaster",
          "syncTolerance",
          "systemLanguage",
          "transform",
          "transformBehavior",
          "type",
          "width",
          "x",
          "y"
        ],
        view: [
          "externalResourcesRequired",
          "preserveAspectRatio",
          "viewBox",
          "viewTarget",
          "zoomAndPan"
        ],
        vkern: ["g1", "g2", "k", "u1", "u2"]
      }
    }), Fe = /* @__PURE__ */ v(Ee);
    Object.defineProperty(ge, "__esModule", { value: !0 });
    const be = Ce, Pe = Oe, ke = Fe;
    ge.default = {
      id: "attr-invalid",
      description: "Attributes must be valid for the given HTML tags.",
      init(i, a) {
        const r = be.htmlElementAttributes["*"] || [], t = Pe.htmlEventAttributes || [], e = ke.svgElementAttributes["*"] || [];
        i.addListener("tagstart", (n) => {
          const o = n.tagName.toLowerCase(), l = n.attrs, s = be.htmlElementAttributes[o] || [], c = ke.svgElementAttributes[o] || [], d = [
            ...r,
            ...t,
            ...s,
            ...e,
            ...c
          ];
          for (const f of l)
            /^data-.+$/.test(f.name) || /^aria-.+$|^role$/.test(f.name) || /^adapt-.+$/.test(f.name) || d.includes(f.name) || a.error(`The attribute [ ${f.name} ] is not valid for the tag [ ${o} ].`, n.line, n.col + n.tagName.length + 1 + f.index, this, f.raw);
        });
      }
    };
    var he = {};
    Object.defineProperty(he, "__esModule", { value: !0 });
    const ve = [
      "a",
      "abbr",
      "address",
      "area",
      "article",
      "aside",
      "audio",
      "b",
      "base",
      "bdi",
      "bdo",
      "blockquote",
      "body",
      "br",
      "button",
      "canvas",
      "caption",
      "cite",
      "code",
      "col",
      "colgroup",
      "data",
      "datalist",
      "dd",
      "del",
      "details",
      "dfn",
      "dialog",
      "div",
      "dl",
      "dt",
      "em",
      "embed",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hr",
      "html",
      "i",
      "iframe",
      "img",
      "input",
      "ins",
      "kbd",
      "label",
      "legend",
      "li",
      "link",
      "main",
      "map",
      "mark",
      "meta",
      "meter",
      "nav",
      "noscript",
      "object",
      "ol",
      "optgroup",
      "option",
      "output",
      "p",
      "param",
      "picture",
      "pre",
      "progress",
      "q",
      "rb",
      "rp",
      "rt",
      "rtc",
      "ruby",
      "s",
      "samp",
      "script",
      "section",
      "select",
      "small",
      "source",
      "span",
      "strong",
      "style",
      "sub",
      "summary",
      "sup",
      "table",
      "tbody",
      "td",
      "template",
      "textarea",
      "tfoot",
      "th",
      "thead",
      "time",
      "title",
      "tr",
      "track",
      "u",
      "ul",
      "var",
      "video",
      "wbr"
    ], $e = [
      "a",
      "altGlyph",
      "altGlyphDef",
      "altGlyphItem",
      "animate",
      "animateColor",
      "animateMotion",
      "animateTransform",
      "circle",
      "clipPath",
      "color-profile",
      "cursor",
      "defs",
      "desc",
      "discard",
      "ellipse",
      "feBlend",
      "feColorMatrix",
      "feComponentTransfer",
      "feComposite",
      "feConvolveMatrix",
      "feDiffuseLighting",
      "feDisplacementMap",
      "feDistantLight",
      "feDropShadow",
      "feFlood",
      "feFuncA",
      "feFuncB",
      "feFuncG",
      "feFuncR",
      "feGaussianBlur",
      "feImage",
      "feMerge",
      "feMergeNode",
      "feMorphology",
      "feOffset",
      "fePointLight",
      "feSpecularLighting",
      "feSpotLight",
      "feTile",
      "feTurbulence",
      "filter",
      "font",
      "font-face",
      "font-face-format",
      "font-face-name",
      "font-face-src",
      "font-face-uri",
      "foreignObject",
      "g",
      "glyph",
      "glyphRef",
      "hatch",
      "hatchpath",
      "hkern",
      "image",
      "line",
      "linearGradient",
      "marker",
      "mask",
      "mesh",
      "meshgradient",
      "meshpatch",
      "meshrow",
      "metadata",
      "missing-glyph",
      "mpath",
      "path",
      "pattern",
      "polygon",
      "polyline",
      "radialGradient",
      "rect",
      "set",
      "stop",
      "svg",
      "switch",
      "symbol",
      "text",
      "textPath",
      "title",
      "tref",
      "tspan",
      "unknown",
      "use",
      "view",
      "vkern"
    ];
    he.default = {
      id: "invalid-tag",
      description: "All tags must be valid HTML tags.",
      init(i, a) {
        const r = [];
        i.addListener("tagstart", (t) => {
          const e = t.tagName;
          !ve.includes(e) && !$e.includes(e) ? a.error(`The tag [ ${e} ] is not a valid HTML tag.`, t.line, t.col, this, t.raw) : r.push(e);
        }), i.addListener("tagend", (t) => {
          const e = t.tagName;
          if (!ve.includes(e))
            a.error(`The closing tag [ ${e} ] is not a valid HTML tag.`, t.line, t.col, this, t.raw);
          else {
            const n = r.lastIndexOf(e);
            n !== -1 && r.splice(n, 1);
          }
        }), i.addListener("end", () => {
          r.forEach((t) => {
            a.error(`The tag [ ${t} ] was opened but never closed.`, 0, 0, this, "");
          });
        });
      }
    }, function(i) {
      Object.defineProperty(i, "__esModule", { value: !0 }), i.invalidTag = i.attrInvalid = i.attrNoUnnecessaryWhitespace = i.tagsCheck = i.titleRequire = i.tagnameSpecialChars = i.tagnameLowercase = i.emptyTagNotSelfClosed = i.tagSelfClose = i.tagPair = i.styleDisabled = i.srcNotEmpty = i.specCharEscape = i.spaceTabMixedDisabled = i.scriptDisabled = i.inputRequiresLabel = i.inlineStyleDisabled = i.inlineScriptDisabled = i.idUnique = i.idClassValue = i.idClsasAdDisabled = i.htmlLangRequire = i.hrefAbsOrRel = i.headScriptDisabled = i.doctypeHTML5 = i.doctypeFirst = i.attrWhitespace = i.attrValueSingleQuotes = i.attrValueNotEmpty = i.attrValueDoubleQuotes = i.attrUnsafeChars = i.attrNoDuplication = i.attrSort = i.attrLowercase = i.altRequire = void 0;
      var a = F;
      Object.defineProperty(i, "altRequire", { enumerable: !0, get: function() {
        return a.default;
      } });
      var r = P;
      Object.defineProperty(i, "attrLowercase", { enumerable: !0, get: function() {
        return r.default;
      } });
      var t = $;
      Object.defineProperty(i, "attrSort", { enumerable: !0, get: function() {
        return t.default;
      } });
      var e = N;
      Object.defineProperty(i, "attrNoDuplication", { enumerable: !0, get: function() {
        return e.default;
      } });
      var n = D;
      Object.defineProperty(i, "attrUnsafeChars", { enumerable: !0, get: function() {
        return n.default;
      } });
      var o = S;
      Object.defineProperty(i, "attrValueDoubleQuotes", { enumerable: !0, get: function() {
        return o.default;
      } });
      var l = H;
      Object.defineProperty(i, "attrValueNotEmpty", { enumerable: !0, get: function() {
        return l.default;
      } });
      var s = I;
      Object.defineProperty(i, "attrValueSingleQuotes", { enumerable: !0, get: function() {
        return s.default;
      } });
      var c = U;
      Object.defineProperty(i, "attrWhitespace", { enumerable: !0, get: function() {
        return c.default;
      } });
      var d = B;
      Object.defineProperty(i, "doctypeFirst", { enumerable: !0, get: function() {
        return d.default;
      } });
      var f = V;
      Object.defineProperty(i, "doctypeHTML5", { enumerable: !0, get: function() {
        return f.default;
      } });
      var u = Z;
      Object.defineProperty(i, "headScriptDisabled", { enumerable: !0, get: function() {
        return u.default;
      } });
      var p = W;
      Object.defineProperty(i, "hrefAbsOrRel", { enumerable: !0, get: function() {
        return p.default;
      } });
      var w = G;
      Object.defineProperty(i, "htmlLangRequire", { enumerable: !0, get: function() {
        return w.default;
      } });
      var m = Y;
      Object.defineProperty(i, "idClsasAdDisabled", { enumerable: !0, get: function() {
        return m.default;
      } });
      var x = X;
      Object.defineProperty(i, "idClassValue", { enumerable: !0, get: function() {
        return x.default;
      } });
      var y = Q;
      Object.defineProperty(i, "idUnique", { enumerable: !0, get: function() {
        return y.default;
      } });
      var L = J;
      Object.defineProperty(i, "inlineScriptDisabled", { enumerable: !0, get: function() {
        return L.default;
      } });
      var j = K;
      Object.defineProperty(i, "inlineStyleDisabled", { enumerable: !0, get: function() {
        return j.default;
      } });
      var k = ee;
      Object.defineProperty(i, "inputRequiresLabel", { enumerable: !0, get: function() {
        return k.default;
      } });
      var q = te;
      Object.defineProperty(i, "scriptDisabled", { enumerable: !0, get: function() {
        return q.default;
      } });
      var g = ie;
      Object.defineProperty(i, "spaceTabMixedDisabled", { enumerable: !0, get: function() {
        return g.default;
      } });
      var z = re;
      Object.defineProperty(i, "specCharEscape", { enumerable: !0, get: function() {
        return z.default;
      } });
      var _ = oe;
      Object.defineProperty(i, "srcNotEmpty", { enumerable: !0, get: function() {
        return _.default;
      } });
      var A = ne;
      Object.defineProperty(i, "styleDisabled", { enumerable: !0, get: function() {
        return A.default;
      } });
      var me = ae;
      Object.defineProperty(i, "tagPair", { enumerable: !0, get: function() {
        return me.default;
      } });
      var De = le;
      Object.defineProperty(i, "tagSelfClose", { enumerable: !0, get: function() {
        return De.default;
      } });
      var Se = se;
      Object.defineProperty(i, "emptyTagNotSelfClosed", { enumerable: !0, get: function() {
        return Se.default;
      } });
      var He = ce;
      Object.defineProperty(i, "tagnameLowercase", { enumerable: !0, get: function() {
        return He.default;
      } });
      var Ie = de;
      Object.defineProperty(i, "tagnameSpecialChars", { enumerable: !0, get: function() {
        return Ie.default;
      } });
      var Ue = fe;
      Object.defineProperty(i, "titleRequire", { enumerable: !0, get: function() {
        return Ue.default;
      } });
      var Be = pe;
      Object.defineProperty(i, "tagsCheck", { enumerable: !0, get: function() {
        return Be.default;
      } });
      var Ve = ue;
      Object.defineProperty(i, "attrNoUnnecessaryWhitespace", { enumerable: !0, get: function() {
        return Ve.default;
      } });
      var Ze = ge;
      Object.defineProperty(i, "attrInvalid", { enumerable: !0, get: function() {
        return Ze.default;
      } });
      var We = he;
      Object.defineProperty(i, "invalidTag", { enumerable: !0, get: function() {
        return We.default;
      } });
    }(ye), function(i) {
      Object.defineProperty(i, "__esModule", { value: !0 }), i.HTMLParser = i.Reporter = i.HTMLRules = i.HTMLHint = void 0;
      const a = T;
      i.HTMLParser = a.default;
      const r = E;
      i.Reporter = r.default;
      const t = ye;
      i.HTMLRules = t;
      class e {
        constructor() {
          this.rules = {}, this.defaultRuleset = {
            "tagname-lowercase": !0,
            "attr-lowercase": !0,
            "attr-value-double-quotes": !0,
            "doctype-first": !0,
            "tag-pair": !0,
            "spec-char-escape": !0,
            "id-unique": !0,
            "src-not-empty": !0,
            "attr-no-duplication": !0,
            "title-require": !0
          };
        }
        addRule(l) {
          this.rules[l.id] = l;
        }
        verify(l, s = this.defaultRuleset) {
          Object.keys(s).length === 0 && (s = this.defaultRuleset), l = l.replace(/^\s*<!--\s*htmlhint\s+([^\r\n]+?)\s*-->/i, (p, w) => (w.replace(/(?:^|,)\s*([^:,]+)\s*(?:\:\s*([^,\s]+))?/g, (m, x, y) => (s[x] = y !== void 0 && y.length > 0 ? JSON.parse(y) : !0, "")), ""));
          const c = new a.default(), d = new r.default(l, s), f = this.rules;
          let u;
          for (const p in s)
            u = f[p], u !== void 0 && s[p] !== !1 && u.init(c, d, s[p]);
          return c.parse(l), d.messages;
        }
        format(l, s = {}) {
          const c = [], d = {
            white: "",
            grey: "",
            red: "",
            reset: ""
          };
          s.colors && (d.white = "\x1B[37m", d.grey = "\x1B[90m", d.red = "\x1B[31m", d.reset = "\x1B[39m");
          const f = s.indent || 0;
          return l.forEach((u) => {
            let m = u.evidence;
            const x = u.line, y = u.col, L = m.length;
            let j = y > 40 + 1 ? y - 40 : 1, k = m.length > y + 60 ? y + 60 : L;
            y < 40 + 1 && (k += 40 - y + 1), m = m.replace(/\t/g, " ").substring(j - 1, k), j > 1 && (m = `...${m}`, j -= 3), k < L && (m += "..."), c.push(`${d.white + n(f)}L${x} |${d.grey}${m}${d.reset}`);
            let q = y - j;
            const g = m.substring(0, q).match(/[^\u0000-\u00ff]/g);
            g !== null && (q += g.length), c.push(`${d.white + n(f) + n(String(x).length + 3 + q)}^ ${d.red}${u.message} (${u.rule.id})${d.reset}`);
          }), c;
        }
      }
      function n(o, l) {
        return new Array(o + 1).join(l || " ");
      }
      i.HTMLHint = new e(), Object.keys(t).forEach((o) => {
        i.HTMLHint.addRule(t[o]);
      });
    }(O);
    var Ne = /* @__PURE__ */ h(O);
    return Ne;
  });
})(we);
var Ye = we.exports;
const Xe = (R) => {
  const b = R.split(" ");
  for (var h = 0; h < b.length; h++)
    b[h] = b[h].charAt(0).toUpperCase() + b[h].slice(1);
  return b.join(" ");
}, Qe = {
  "tagname-lowercase": !0,
  "attr-lowercase": !0,
  "attr-invalid": !0,
  "invalid-tag": !0,
  "attr-value-double-quotes": !0,
  "doctype-first": !0,
  "tag-pair": !0,
  "spec-char-escape": !0,
  "id-unique": !0,
  "src-not-empty": !0,
  "attr-no-duplication": !0,
  "title-require": !0
};
class Je {
  constructor(b, h = Qe, v) {
    this.html = b, this.ruleset = h, this.linterResponse = this.lint(), this.model = v;
  }
  lint() {
    return Ye.HTMLHint.verify(this.html, this.ruleset);
  }
  getEditorMarks(b) {
    return this.linterResponse.map((h) => ({
      startLineNumber: h.line,
      startColumn: h.col,
      endLineNumber: h.line,
      endColumn: h.evidence !== "" ? h.col + h.evidence.length : this.model !== void 0 ? this.model.getLineLength(h.line) : h.col + 1,
      message: h.message,
      severity: b.MarkerSeverity[Xe(h.type)]
    }));
  }
  getLinterResponse() {
    return this.linterResponse;
  }
}
class ft {
  constructor(b, h, v) {
    this.editor = b, this.monaco = h, this.ruleset = v;
  }
  lint() {
    var v;
    const b = this.editor.getValue();
    if (((v = this.editor.getModel()) == null ? void 0 : v.getLanguageId()) === "html") {
      const T = new Je(b, this.ruleset, this.editor.getModel() || void 0).getEditorMarks(this.monaco), C = this.editor.getModel();
      if (C === null)
        throw new Error("Your model still does't exist.");
      this.monaco.editor.setModelMarkers(C, "owner", T);
    }
  }
  watch() {
    this.lint(), this.editor.onDidChangeModelContent((b) => {
      this.lint();
    });
  }
}
export {
  Je as HTMLMonacoMarks,
  ft as default
};
